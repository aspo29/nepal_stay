<% layout('/layouts/boilerplate.ejs') %>

    <script>
        function openChat(chatId) {
            // Hide all chat boxes
            document.querySelectorAll('.chat-box').forEach(chat => chat.classList.add('d-none'));

            // Get the selected chat element
            const selectedChat = document.getElementById('chat-' + chatId);

            // Ensure the chat element exists before modifying it
            if (selectedChat) {
                selectedChat.classList.remove('d-none');
            } else {
                console.error("Chat ID not found:", chatId);
            }
        }
    </script>

    <div class="container-fluid">
        <div class="row">
            <!-- Left side for chat list -->
            <div class="col-md-3 mt-2 overflow-auto" style="max-height: 90vh;">
                <h2 class="text-center mb-4">All Chats</h2>
                <ul class="list-unstyled">
                    <% chats.forEach(function(chat) { %>
                        <% if (chat.user.username ==currentUser.username) { %> <!-- Exclude current user's chats -->
                            <li class="mb-3 p-3 bg-light shadow-sm rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <p class="font-weight-bold m-0">
                                        <%= chat.user.username %>
                                    </p>
                                    <button class="btn btn-success btn-sm" onclick="openChat('<%= chat._id %>')">
                                        Open Chat
                                    </button>
                                </div>
                                <p class="text-muted small mb-0">
                                    <%= chat.lastMessage %>
                                </p>
                            </li>
                            <% } %>
                                <% }); %>
                </ul>
            </div>

            <!-- Right side for chat interaction -->
            <div class="col-md-9 p-4 bg-white">
                <% chats.forEach(function(chat, index) { %>
                    <div id="chat-<%= chat._id %>" class="chat-box d-none">
                        <h3 class="mb-4">Chat with <%= chat.user.username %>
                        </h3>
                        <div class="bg-light p-4 rounded mb-4" style="max-height: 70vh; overflow-y: auto;">
                            <!-- Displaying messages -->
                            <% chat.chats.forEach(function(message) { %>
                                <p
                                    class="<%= message.sender === currentUser.id ? 'bg-success text-white p-2 rounded mb-2 text-right sender-message' : 'bg-info text-white p-2 rounded mb-2 receiver-message' %>">
                                    <strong>
                                        <%= message.sender===currentUser.id ? 'You' : message.sender %>:
                                    </strong>
                                    <%= message.text %>
                                </p>
                                <% }); %>
                        </div>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Type your message..."
                                id="input-<%= chat._id %>">
                            <div class="input-group-append">
                                <button class="btn btn-success" type="button"
                                    onclick="sendMessage('<%= chat._id %>')">Send</button>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                        <div id="no-chat-selected" class="chat-box">
                            <h3>Select a chat to start messaging</h3>
                        </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script>
        const socket = io();

        socket.on('connect', () => {
            console.log('Connected to Socket.IO server');
        });

        socket.on('chat message', (data) => {
            const chatId = data.chatId; // Get the chat ID from the received data
            const chatBox = document.getElementById('chat-' + chatId);

            if (chatBox) {
                const messageElement = document.createElement('p');
                messageElement.classList.add('p-2', 'rounded', 'mb-2', 'text-right');
                if (data.senderId === 'YourSenderId') {
                    messageElement.classList.add('bg-success', 'sender-message');
                    messageElement.innerHTML = `<strong>You:</strong> ${data.msg}`;
                } else {
                    messageElement.classList.add('bg-info', 'receiver-message');
                    messageElement.innerHTML = `<strong>${data.username}:</strong> ${data.msg}`;
                }
                chatBox.querySelector('.bg-light').appendChild(messageElement); // Append to the messages area
            }
        });

        async function sendMessage(chatId) {
            const input = document.getElementById(`input-${chatId}`);
            const messageText = input.value;
            const username = 'YourUsername'; // Replace this with the actual username
            const senderId = 'YourSenderId'; // Replace this with the actual sender ID (req.user._id)

            if (messageText.trim() === "") {
                alert("Message cannot be empty");
                return;
            }

            try {
                // Send the message to the server using fetch (for persistence in the DB)
                const response = await fetch(`/chats/${chatId}/messages`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        text: messageText
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to send message');
                }

                // Clear the input field after sending the message
                input.value = '';

                // Emit the message to the server via Socket.IO (for real-time communication)
                socket.emit('chat message', { chatId, msg: messageText, username, senderId });

                console.log("Message sent successfully in chat:", chatId, "Message:", messageText);
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Error sending message. Please try again.');
            }
        }
    </script>

    <style>
        .sender-message {
            text-align: right;
            background-color: #28a745;
            color: white;
            margin-left: auto;
            max-width: 70%;
        }

        .receiver-message {
            text-align: left;
            background-color: #17a2b8;
            color: white;
            margin-right: auto;
            max-width: 70%;
        }

        .chat-box {
            margin-bottom: 20px;
        }

        .bg-light {
            padding: 20px;
        }
    </style>